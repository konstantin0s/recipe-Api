{"version":3,"sources":["components/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","_ref","title","calories","image","ingredients","totalWeight","healthLabels","dietLabels","source","totalNutrients","react_default","a","createElement","className","src","toFixed","map","ingredient","key","Math","random","text","App","_useState","useState","_useState2","Object","slicedToArray","recipes","setRecipes","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","getRecipes","asyncToGenerator","regenerator_default","mark","_callee","result","data","wrap","_context","prev","next","fetch","concat","process","sent","json","hits","stop","apply","this","arguments","Fragment","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-haspopup","aria-labelledby","onSubmit","e","preventDefault","onChange","target","value","recipe","components_Recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f63dc86.chunk.js","sourcesContent":["import React from 'react';\n\nconst Recipe = ({ title, calories, image,\n    ingredients, healthLabels, totalWeight, dietLabels, source,\n    totalNutrients }) => {\n    return (\n        <div className=\"recipe\">\n            <h1 className=\"title\">{title}</h1>\n            <div className=\"source\">\n                <h6>Source:</h6>\n                <h4>{source}</h4>\n            </div>\n            <img src={image} />\n            <ul className=\"desc\">\n                <h5>{dietLabels}</h5>   <p>{calories.toFixed()} Kal</p>\n\n                <h5>Ingredients:</h5>\n                <div className=\"flexi\">\n                    {ingredients.map(ingredient => (\n\n                        <li className=\"left\"\n                            key={Math.random(totalWeight)}>{ingredient.text}</li>\n                    ))}\n                </div>\n            </ul>\n        </div>\n    );\n}\n\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Recipe from './components/Recipe';\n\nconst App = () => {\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken');\n\n  useEffect(() => {\n    getRecipes();\n  }, [search]);\n\n  const getRecipes = async () => {\n    const result = await fetch(`https://cors-anywhere.herokuapp.com/https://api.edamam.com/search?q=${query}&app_id=${process.env.REACT_APP_RECIPE_ID}&app_key=${process.env.REACT_APP_RECIPE_KEY}`)\n    const data = await result.json();\n    setRecipes(data.hits);\n  }\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n    <React.Fragment>\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#\">BonaPetit!</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExample01\" aria-controls=\"navbarsExample01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarsExample01\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"#\">BonaPetit <span className=\"sr-only\">(current)</span></a>\n            </li>\n\n            <li className=\"nav-item dropdown\">\n              <a className=\"nav-link dropdown-toggle\" href=\"http://example.com\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Dropdown</a>\n              <div className=\"dropdown-menu\" aria-labelledby=\"dropdown01\">\n                <a className=\"dropdown-item\" href=\"#\">BonaPetit</a>\n\n              </div>\n            </li>\n          </ul>\n        </div>\n      </nav>\n\n\n      <div className=\"App container\">\n        <form onSubmit={getSearch} className=\"search-form\">\n          <input type=\"text\" onChange={updateSearch}\n            className=\"search-bar\"\n            value={search} />\n          <button\n            type=\"submit\" className=\"search-button btn btn-secondary\">Search</button>\n        </form>\n        <div className=\"content\">\n          {recipes.map(recipe => (\n            <Recipe\n              key={Math.random(recipe.recipe.totalWeight)}\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n              healthLabels={recipe.recipe.healthLabels}\n              dietLabels={recipe.recipe.dietLabels}\n              source={recipe.recipe.source}\n              totalNutrients={recipe.recipe.totalNutrients}\n            />\n          ))}\n        </div>\n      </div>\n\n      <footer className=\"page-footer navbar navbar-dark bg-dark\">\n        <div className=\"footer-copyright text-center\">Â© 2019 Copyright:\n    <a href=\"#\"> BonaPetit</a>\n        </div>\n      </footer>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}